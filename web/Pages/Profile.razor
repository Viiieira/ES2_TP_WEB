@namespace web.Pages

@page "/profile"

@using web.Services.Session
@using web.Components
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json

@inject NavigationManager NavManager
@inject ISession SessionStorage
@using web.Models
@inject HttpClient HttpClient

<main class="container mx-auto">
    <NavigationBar />
    
    <section class="pt-5">
        <h2 class="mb-5">My Talents</h2>
        
        <table class="table my-5">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Category</th>
                    <th scope="col">Price p/ Hour</th>
                    <th scope="col">Visibility</th>
                    <th scope="col">Options</th>
                </tr>
            </thead>
            <tbody>
            @if (_talents == null)
            {
                <tr>
                    <td colspan="5" class="text-muted">No Talents were found from you.</td>
                </tr>
            }
            else
            {
                @foreach (var talent in _talents)
                {
                    var talentCategory = _talentCategories.FirstOrDefault(c => c.Id == talent.IdTalentCategory);
                    Console.WriteLine(JsonSerializer.Serialize(talent));
                    <tr>
                        <td>@talent.Name</td>
                        <td>@(talentCategory != null ? talentCategory.Name : "")</td>
                        <td>@talent.PricePerHour€</td>
                        <td>@(talent.Private ? "Private" : "Public")</td>
                        <td class="d-flex align-items-center gap-5 flex-wrap">
                            <a href="@($"edit-professional-area/{talent.Id}")">
                                <i class="fa-solid fa-pencil"></i>
                            </a>
                            <a class="text-danger">
                                @* @onclick="() => DeleteTalent(talent.Id)" *@
                                <i class="fa-solid fa-trash"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </section>
</main>

@code {
    private Talent[]? _talents;
    private TalentCategory[]? _talentCategories;
    private string bearerToken;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserTalents();
            Console.WriteLine(_talents.Length);
            StateHasChanged();
        }
    }
    
    private async Task LoadUserTalents()
    {
        var loadedUser = await SessionStorage.LoadStateAsync();
        if (string.IsNullOrEmpty(loadedUser.Token))
        {
            NavManager.NavigateTo("/Login", true);
            return;
        }

        bearerToken = loadedUser.Token;
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loadedUser.Token);

        // Get the user ID from SessionStorage
        int userId = loadedUser.UserId;

        // Send the GET request to the API endpoint to load talents
        var talentsResponse = await HttpClient.GetFromJsonAsync<Talent[]>($"http://localhost:8000/api/talents/user/{userId}");
        if (talentsResponse != null)
        {
            _talents = talentsResponse;
        }

        // Send the GET request to the API endpoint to load talent categories
        var talentCategoriesResponse = await HttpClient.GetFromJsonAsync<TalentCategory[]>("http://localhost:8000/api/categories");
        if (talentCategoriesResponse != null)
        {
            _talentCategories = talentCategoriesResponse;
        }
    }
}