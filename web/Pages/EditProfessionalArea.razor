@page "/edit-professional-area/{ProfessionalAreaId:int}"

@namespace web.Pages

@using web.Services.Session
@using web.Components
@inject NavigationManager NavManager
@inject ISession SessionStorage
@inject Services.Http.ProfessionalArea ProfessionalArea

@using System.Net.Http
@using System.Net.Http.Headers
@using web.Models
@inject HttpClient HttpClient

@inject web.Services.Http.ProfessionalArea ProfessionalAreaService

<main class="container mx-auto">
    <LogoutButton />

    @if (_areas != null && _areas.Length > 0)
    {
        <h3 class="mb-5">Edit Professional Area #@ProfessionalAreaId</h3>

        <form class="crud-edit-form">
            <div class="input-field">
                <label for="area">Area</label>
                <input type="text" class="form-control" id="area" value="@_areas[0].Area">
            </div>

            <button type="button" class="btn mt-5" data-style="primary">Update</button>
        </form>
    }
    else
    {
        <p>No professional area found.</p>
    }
</main>

@code {
    private string bearerToken;
    private ProfessionalArea[]? _areas;
    private string Area;
    private string ProfessionalAreaMessage;

    [Parameter]
    public int ProfessionalAreaId { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProfessionalAreaById();
            StateHasChanged();
        }
    }

    private async Task LoadProfessionalAreaById()
    {
        var loadedUser = await SessionStorage.LoadStateAsync();
        if (string.IsNullOrEmpty(loadedUser.Token))
        {
            NavManager.NavigateTo("/Login", true);
            return;
        }

        bearerToken = loadedUser.Token;
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loadedUser.Token);
        var response = await HttpClient.GetFromJsonAsync<ProfessionalArea>($"http://localhost:8000/api/areas/{ProfessionalAreaId}");

    // Handle the single ProfessionalArea object
        if (response != null)
        {
            _areas = new[] { response };
        }
    }

}