@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using web.Models
@using web.Services.Http.Auth
@inject IAuthClient AuthClient
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavManager


<div id="user-form-wrapper">
    <h1>Login</h1>
    <form>
        <div class="input-field">
            <label for="username-field">
                Username <span class="required">*</span>
            </label>
            <input type="text" name="username" id="username-field" @bind="LoginModel.Username" required autofocus/>
        </div>
        <div class="input-field">
            <label for="pwd-field">
                Password <span class="required">*</span>
            </label>
            <div class="pwd-group">
                <input type="password" name="pwd" id="pwd-field" @bind="LoginModel.Password" required/>
                <i class="fa-solid fa-eye" onclick="togglePasswordVisibility(this)"></i>
            </div>
        </div>
        <div class="login-response small"></div>
        <button @onclick="() => Authenticate()" class="btn" data-style="primary" type="submit">Enter</button>
    </form>
    <div class="redirect-link">
        <p class="small">
            Don't have an account? <a href="/register">Register</a>
        </p>
    </div>
</div>

@code {
    private Models.Login LoginModel = new Models.Login();
    private AuthenticationToken user = new AuthenticationToken();

    private async Task Authenticate()
    {
        try
        {
            var loginResponse = await AuthClient.SignIn(LoginModel);

            if (loginResponse is not null)
            {
   
                user = new AuthenticationToken()
                {
                    Token = loginResponse.Token,
                    Username = loginResponse.Username,
                    UserId = loginResponse.UserId,
                    Role = loginResponse.Role
                };
               

                await SetUserAsync();
                NavManager.NavigateTo("/welcomepage", true);
            }
            else
            {
                Console.WriteLine("Login n√£o foi efetuado com sucesso!");
            }
        }
        catch
            (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }   
  
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var loadedUser = await LoadStateAsync();
            if (loadedUser is not null)
            {
                NavManager.NavigateTo("/welcomepage", true);
            }

            StateHasChanged();
        }
    }

    private async Task<AuthenticationToken> LoadStateAsync()
    {
        var result = await SessionStorage.GetAsync<AuthenticationToken>("User");
        if (result.Success && !result.Value.UserId.Equals(0))
        {
            return result.Value;
        }
        return null;
    }

    private async Task SetUserAsync()
    {
        await SessionStorage.SetAsync("User", user);
    }
}