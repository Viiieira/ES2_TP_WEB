@page "/login"
@using web.Models
@using web.Services.Http.Auth
@using web.Services.Session
@inject IAuthClient AuthClient
@inject ISession SessionStorage
@inject NavigationManager NavManager


<div id="user-form-wrapper">
    <h1>Login</h1>
    <form @onsubmit="() => Authenticate()">
        <div class="input-field">
            <label for="username-field">
                Username <span class="required">*</span>
            </label>
            <input type="text" name="username" id="username-field" @bind="LoginModel.Username" required autofocus/>
        </div>
        <div class="input-field">
            <label for="pwd-field">
                Password <span class="required">*</span>
            </label>
            <div class="pwd-group">
                <input type="password" name="pwd" id="pwd-field" @bind="LoginModel.Password" required/>
                <i class="fa-solid fa-eye" onclick="togglePasswordVisibility(this)"></i>
            </div>
        </div>
        <div class="login-response small"></div>
        <button class="btn" data-style="primary" type="submit">Enter</button>
    </form>
    <div class="redirect-link">
        <p class="small">
            Don't have an account? <a href="/register">Register</a>
        </p>
    </div>
    <div class="flex-column">
        <p class="small" data-status="error">
            @LoginMessage
        </p>
    </div>
</div>

@code {
    private Models.Login LoginModel;
    private AuthenticationToken User;
    private string LoginMessage;

    protected override Task OnInitializedAsync()
    {
        LoginModel = new Models.Login();
        User = new AuthenticationToken();
        LoginMessage = "";
        return base.OnInitializedAsync();
    }

    private async Task Authenticate()
    {
        try
        {
            var loginResponse = await AuthClient.SignIn(LoginModel);

            if (loginResponse is not null)
            {
                User = new AuthenticationToken()
                {
                    Token = loginResponse.Token,
                    Username = loginResponse.Username,
                    UserId = loginResponse.UserId,
                    Role = loginResponse.Role
                };


                await SetUserAsync(User);
                NavManager.NavigateTo("/", true);
            }
            else
            {
                LoginMessage = "Username or password do not match!";
            }
        }
        catch
            (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var loadedUser = await SessionStorage.LoadStateAsync();
            if (loadedUser is not null)
            {
                NavManager.NavigateTo("/", true);
            }

            StateHasChanged();
        }
    }
    
    
    private async Task SetUserAsync(AuthenticationToken user)
    {
        await SessionStorage.SetStateAsync(user);
    }

}