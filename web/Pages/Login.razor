@page "/"
@using web.Services.Http.Auth
@using AuthenticationToken = web.Models.AuthenticationToken
@inject IAuthClient AuthClient
@inject ISessionStorageService StorageService
@inject NavigationManager NavManager

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Login Page</title>
    <link rel="stylesheet" href="bootstrap-5.0.2-dist/css/bootstrap-grid.min.css">
</head>
<body>
<section id="login-form">
    <h1>Login</h1>

    <form>
        <div class="input-field">
            <label for="username">Username:</label>
            <input class="input rounded-sm" type="text" name="username" @bind="LoginModel.Username"/>
        </div>
        <div class="input-field">
            <label for="password">Password:</label>
            <input class="input rounded-sm" type="password" name="password" @bind="LoginModel.Password"/>
        </div>
        <button @onclick="() => Authenticate()" class="btn rounded-sm" data-style="primary">Login</button>
    </form>
</section>
</body>
</html>

@code {
    private Models.Login LoginModel = new Models.Login();

    private async Task Authenticate()
    {
        try
        {
            var loginResponse = await AuthClient.SignIn(LoginModel);

            if (loginResponse is not null)
            {
                var user = new AuthenticationToken()
                {
                    Token = loginResponse.Token,
                    Username = loginResponse.Username,
                    UserId = loginResponse.UserId,
                    Role = loginResponse.Role
                };
               
            }
            else
            {
                Console.WriteLine("Login n√£o foi efetuado com sucesso!");
            }
        }
        catch
            (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    protected override async Task OnInitializedAsync(bool firstRender)
    {
        if (firstRender)
        {
            var loggedUser = await .GetItemAsync<AuthenticationToken>("User");

            if (loggedUser is not null)
            {
                NavManager.NavigateTo("/welcomepage");
            } 
        }
    }

}